        test saving of emails w/o data
            converting emails to/from []bytes
        test new email after startup
- 170904
x       start using module-ids -> when re-spawning modules, pass stored module-id
- 170718
x       something still not working with config/storage and re-spawning of email
    test startup of email-module
x   found nice library for imap-simulation
email.go
- 170716
x   tag has tags relationship
x   verify many-to-many relationship is OK
x   better link tags and objects - perhaps using gorm's many-to-many relationship?
- 170706
struct.go
    storage saves objects and tags
        using gorm
    ? Think about how to integrate with local database / sqlite?
        params: [module,tags,object]
    .processMsg(msg(action: search(params))) -> broker.broadcastMsg(msg(object: found))
    .processMsg(msg.tag.storeit == true) -> save(msg.tag)
    .processMsg(msg.obj.storeit == true) -> save(msg.object)
storage.go
- 170705
x   message.Actions -> message.Action
probably
x    cybermind.new -> .processMsg(nil) -> msg(action: search(module=config))
x    cli.spawn -> .processMsg -> msg(object: config, tag: saveit)
x    .processMsg(msg{object: config}) -> broker.spawnModule
config.go
x    also needs storage module
x    make moduleInstance module in broker that takes care of spawning and
x    creating savable objects
- 170702
Spawning
    perhaps only needed when sending to other node
? How to sign messages?
Check configuration-calls
check all modules are in all.go
- 170630